name: "Builds and tests for ARM"
on:
  pull_request:
  push:
    branches:
      - master
env:
  # Shared variables
  CI_TASK_DIR: ${{ github.workspace }}
  CI_ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
jobs:
  # Linux jobs
  swig_Linux:
    name: "Lin|Build SWIG for Linux"
    runs-on: ubuntu-20.04
    env:
      CFLAGS: "-static-libgcc -static-libstdc++"
      CXXFLAGS: "-static-libgcc -static-libstdc++"
    steps:
      - run: |
          sudo apt-get install -y --no-install-recommends autoconf automake bison build-essential mingw-w64
      - uses: actions/checkout@v2
        with:
          repository: "swig/swig"
          ref: "90cdbee6a69d13b39d734083b9f91069533b0d7b"
      - run: |
          mkdir -p build-static/
      - run: |
          curl -sSL https://ftp.pcre.org/pub/pcre/pcre-8.43.tar.gz > pcre-8.43.tar.gz
          ./Tools/pcre-build.sh
      - run: |
          sh autogen.sh
          ./configure \
            --prefix=`pwd`/build-static/ \
            --program-prefix=ds-
      - run: |
          make -j
      - run: |
          make install
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}
          path: ${{ github.workspace }}/build-static/
  build-ctc-decoder-Linux:
    name: "Lin|Build CTC decoder Python package for testing"
    needs: [ swig_Linux ]
    runs-on: ubuntu-20.04
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - run: |
          python --version
          pip --version
      - uses: actions/download-artifact@v2
        with:
          name: "swig_Linux"
          path: ${{ github.workspace }}/native_client/ds-swig/
      - name: Link ds-swig into swig
        run: |
          ls -hal ${{ github.workspace }}/native_client/ds-swig/bin
          ln -s ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
          chmod +x ${{ github.workspace }}/native_client/ds-swig/bin/ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
      - id: get_numpy
        uses: ./.github/actions/numpy_vers
        with:
          pyver: 3.6
      - name: Make decoder package
        run: |
          NUMPY_BUILD_VERSION=${{ steps.get_numpy.outputs.build_version }} \
          NUMPY_DEP_VERSION=${{ steps.get_numpy.outputs.dep_version }} \
          make -C native_client/ctcdecode/ \
            NUM_PROCESSES=$(nproc) \
            bindings
      - uses: actions/upload-artifact@v2
        with:
          name: "ds_ctcdecoder-test.whl"
          path: ${{ github.workspace }}/native_client/ctcdecode/dist/*.whl
      - run: |
          make -C native_client/ctcdecode clean-keep-third-party
  train-test-model-Linux:
    name: "Lin|Train a test model"
    needs: [ "build-ctc-decoder-Linux" ]
    runs-on: ubuntu-20.04
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
      matrix:
        bitrate: ["8k", "16k"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - uses: actions/download-artifact@v2
        with:
          name: "ds_ctcdecoder-test.whl"
      - run: |
          python --version
          pip --version
      - run: |
          pip install --upgrade pip==19.3.1 setuptools==45.0.0 wheel==0.33.6
      - run: |
          pip install ds_ctcdecoder-*-cp36-cp36m-*_x86_64.whl
          DS_NODECODER=y pip install --upgrade .
      - run: |
          bits=""
          if [ "${{ matrix.bitrate }}" = "8k" ]; then
            bits=8000
          fi
          if [ "${{ matrix.bitrate }}" = "16k"  ]; then
            bits=16000
          fi

          # Easier to rename to that we can exercize the LDC93S1 importer code to
          # generate the CSV file.
          echo "Moving ${bits} to LDC93S1.wav"
          mv data/smoke_test/LDC93S1_pcms16le_1_${bits}.wav data/smoke_test/LDC93S1.wav

          ./bin/run-ci-ldc93s1_new.sh 249 ${bits}
          ./bin/run-ci-ldc93s1_tflite.sh ${bits}
      - run: |
          curl -vsSL https://github.com/mozilla/DeepSpeech/releases/download/v0.9.3/linux.amd64.convert_graphdef_memmapped_format.xz | xz -d > /tmp/convert_graphdef_memmapped_format
          chmod +x /tmp/convert_graphdef_memmapped_format
          /tmp/convert_graphdef_memmapped_format --in_graph=/tmp/train/output_graph.pb --out_graph=/tmp/train/output_graph.pbmm
      - run: |
          tar -cf - \
            -C /tmp/ckpt/ . \
            | xz -9 -T0 > /tmp/checkpoint.tar.xz
      - run: |
          mkdir -p ${{ github.workspace }}/tmp/
          cp /tmp/train*/output_graph.* /tmp/checkpoint.tar.xz ${{ github.workspace }}/tmp/
      - run: |
          ls -hal /tmp/ ${{ github.workspace }}/tmp/
      - uses: actions/upload-artifact@v2
        with:
          name: "test-model.tf-${{ matrix.bitrate }}.zip"
          path: ${{ github.workspace }}/tmp/output_graph.pb*
      - uses: actions/upload-artifact@v2
        with:
          name: "test-model.tflite-${{ matrix.bitrate }}.zip"
          path: ${{ github.workspace }}/tmp/output_graph.tflite
      - uses: actions/upload-artifact@v2
        with:
          name: "test-checkpoint.${{ matrix.bitrate }}.zip"
          path: ${{ github.workspace }}/tmp/checkpoint.tar.xz
  tensorflow_opt-LinuxArmv7:
    name: "LinArmv7|Check TensorFlow cache"
    runs-on: ubuntu-20.04
    outputs:
      status: ${{ steps.check_artifact_exists.outputs.status }}
      cache_key: ${{ steps.get_cache_key.outputs.key }}
    strategy:
      matrix:
        arch: [ "armv7" ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - id: get_cache_key
        uses: ./.github/actions/get_cache_key
        with:
          extras: "0"
      - id: check_artifact_exists
        uses: ./.github/actions/check_artifact_exists
        with:
          name: ${{ steps.get_cache_key.outputs.key }}
  tensorflow_opt-LinuxAarch64:
    name: "LinAarch64|Check TensorFlow cache"
    runs-on: ubuntu-20.04
    outputs:
      status: ${{ steps.check_artifact_exists.outputs.status }}
      cache_key: ${{ steps.get_cache_key.outputs.key }}
    strategy:
      matrix:
        arch: [ "aarch64" ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - id: get_cache_key
        uses: ./.github/actions/get_cache_key
        with:
          extras: "0"
      - id: check_artifact_exists
        uses: ./.github/actions/check_artifact_exists
        with:
          name: ${{ steps.get_cache_key.outputs.key }}
  build-tensorflow-LinuxArmv7:
    name: "LinArmv7|Build TensorFlow (opt)"
    needs: tensorflow_opt-LinuxArmv7
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        arch: [ "armv7" ]
    steps:
      - run: true
        if: needs.tensorflow_opt-LinuxArmv7.outputs.status == 'found'
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'
        if: needs.tensorflow_opt-LinuxArmv7.outputs.status == 'missing'
      - uses: ./.github/actions/setup-tensorflow
        if: needs.tensorflow_opt-LinuxArmv7.outputs.status == 'missing'
      - uses: ./.github/actions/build-tensorflow
        with:
          flavor: "--linux-${{ matrix.arch }}"
        if: needs.tensorflow_opt-LinuxArmv7.outputs.status == 'missing'
      - uses: ./.github/actions/package-tensorflow
        if: needs.tensorflow_opt-LinuxArmv7.outputs.status == 'missing'
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ needs.tensorflow_opt-LinuxArmv7.outputs.cache_key }}
          path: ${{ github.workspace }}/artifacts/home.tar.xz
        if: needs.tensorflow_opt-LinuxArmv7.outputs.status == 'missing'
  build-tensorflow-LinuxAarch64:
    name: "LinAarch64|Build TensorFlow (opt)"
    needs: tensorflow_opt-LinuxAarch64
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        arch: [ "aarch64" ]
    steps:
      - run: true
        if: needs.tensorflow_opt-LinuxAarch64.outputs.status == 'found'
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'
        if: needs.tensorflow_opt-LinuxAarch64.outputs.status == 'missing'
      - uses: ./.github/actions/setup-tensorflow
        if: needs.tensorflow_opt-LinuxAarch64.outputs.status == 'missing'
      - uses: ./.github/actions/build-tensorflow
        with:
          flavor: "--linux-${{ matrix.arch }}"
        if: needs.tensorflow_opt-LinuxAarch64.outputs.status == 'missing'
      - uses: ./.github/actions/package-tensorflow
        if: needs.tensorflow_opt-LinuxAarch64.outputs.status == 'missing'
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ needs.tensorflow_opt-LinuxAarch64.outputs.cache_key }}
          path: ${{ github.workspace }}/artifacts/home.tar.xz
        if: needs.tensorflow_opt-LinuxAarch64.outputs.status == 'missing'
  build-lib_LinuxArmv7:
    name: "LinArmv7|Build libdeepspeech+client"
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build-flavor: ["tflite"]
        arch: [ "armv7" ]
    needs: [ build-tensorflow-LinuxArmv7, tensorflow_opt-LinuxArmv7 ]
    env:
      SYSTEM_TARGET: rpi3
      SYSTEM_RASPBIAN: ${{ github.workspace }}/multistrap-raspbian-buster
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v2
        with:
          name: ${{ needs.tensorflow_opt-LinuxArmv7.outputs.cache_key }}
          path: ${{ github.workspace }}/
        if: needs.tensorflow_opt-LinuxArmv7.outputs.status == 'missing'
      - uses: ./.github/actions/check_artifact_exists
        with:
          name: ${{ needs.tensorflow_opt-LinuxArmv7.outputs.cache_key }}
          path: ${{ github.workspace }}/
          download: true
        if: needs.tensorflow_opt-LinuxArmv7.outputs.status == 'found'
      - run: |
          tar -xf ${{ github.workspace }}/home.tar.xz --skip-old-files
          rm ${{ github.workspace }}/home.tar.xz
      - run: |
          git status
      - name: "Install chroot"
        uses: ./.github/actions/multistrap
        with:
          arch: ${{ matrix.arch }}
      - uses: ./.github/actions/host-build
        with:
          arch: ${{ matrix.arch }}
          flavor: ${{ matrix.build-flavor }}
      - uses: ./.github/actions/package
      - uses: actions/upload-artifact@v2
        with:
          name: "native_client.${{ matrix.build-flavor }}.linux.${{ matrix.arch }}.tar.xz"
          path: ${{ github.workspace }}/artifacts/native_client.tar.xz
      - uses: actions/upload-artifact@v2
        with:
          name: "libdeepspeech.${{ matrix.build-flavor }}.linux.${{ matrix.arch }}.zip"
          path: ${{ github.workspace }}/artifacts/libdeepspeech.zip
  build-lib_LinuxAarch64:
    name: "LinAarch64|Build libdeepspeech+client"
    runs-on: ubuntu-20.04
    strategy:
      matrix: 
        build-flavor: ["tflite"]
        arch: [ "aarch64" ]
    needs: [ build-tensorflow-LinuxAarch64, tensorflow_opt-LinuxAarch64 ]
    env:
      SYSTEM_TARGET: rpi3-armv8
      SYSTEM_RASPBIAN: ${{ github.workspace }}/multistrap-armbian64-buster
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v2
        with:
          name: ${{ needs.tensorflow_opt-LinuxAarch64.outputs.cache_key }}
          path: ${{ github.workspace }}/
        if: needs.tensorflow_opt-LinuxAarch64.outputs.status == 'missing'
      - uses: ./.github/actions/check_artifact_exists
        with:
          name: ${{ needs.tensorflow_opt-LinuxAarch64.outputs.cache_key }}
          path: ${{ github.workspace }}/
          download: true
        if: needs.tensorflow_opt-LinuxAarch64.outputs.status == 'found'
      - run: |
          tar -xf ${{ github.workspace }}/home.tar.xz --skip-old-files
          rm ${{ github.workspace }}/home.tar.xz
      - run: |
          git status
      - name: "Install chroot"
        uses: ./.github/actions/multistrap
        with:
          arch: ${{ matrix.arch }}
      - uses: ./.github/actions/host-build
        with:
          arch: ${{ matrix.arch }}
          flavor: ${{ matrix.build-flavor }}
      - uses: ./.github/actions/package
      - uses: actions/upload-artifact@v2
        with:
          name: "native_client.${{ matrix.build-flavor }}.linux.${{ matrix.arch }}.tar.xz"
          path: ${{ github.workspace }}/artifacts/native_client.tar.xz
      - uses: actions/upload-artifact@v2
        with:
          name: "libdeepspeech.${{ matrix.build-flavor }}.linux.${{ matrix.arch }}.zip"
          path: ${{ github.workspace }}/artifacts/libdeepspeech.zip
  build-python-LinuxArmv7:
    name: "LinArmv7|Build python bindings"
    runs-on: ubuntu-20.04
    needs: [ build-lib_LinuxArmv7, swig_Linux, tensorflow_opt-LinuxArmv7 ]
    strategy:
      matrix:
        build-flavor: ["tflite"]
        python-version: [3.7]
        arch: [ "armv7" ]
    env:
      DEBIAN_FRONTEND: "noninteractive"
      SYSTEM_TARGET: rpi3
      SYSTEM_RASPBIAN: ${{ github.workspace }}/multistrap-raspbian-buster
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v2
        with:
          name: "native_client.${{ matrix.build-flavor }}.linux.${{ matrix.arch }}.tar.xz"
          path: ${{ github.workspace }}/tensorflow/bazel-bin/native_client/
      - run: |
          cd ${{ github.workspace }}/tensorflow/bazel-bin/native_client/
          tar xf native_client.tar.xz
          ls -hal
          cd ${{ github.workspace }}/
      - uses: actions/download-artifact@v2
        with:
          name: "swig_Linux"
          path: ${{ github.workspace }}/native_client/ds-swig/
      - name: Link ds-swig into swig
        run: |
          ls -hal ${{ github.workspace }}/native_client/ds-swig/bin
          ln -s ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
          chmod +x ${{ github.workspace }}/native_client/ds-swig/bin/ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
      - uses: actions/download-artifact@v2
        with:
          name: ${{ needs.tensorflow_opt-LinuxArmv7.outputs.cache_key }}
          path: ${{ github.workspace }}/
        if: needs.tensorflow_opt-LinuxArmv7.outputs.status == 'missing'
      - uses: ./.github/actions/check_artifact_exists
        with:
          name: ${{ needs.tensorflow_opt-LinuxArmv7.outputs.cache_key }}
          path: ${{ github.workspace }}/
          download: true
        if: needs.tensorflow_opt-LinuxArmv7.outputs.status == 'found'
      - run: |
          tar -xf ${{ github.workspace }}/home.tar.xz --skip-old-files
          rm ${{ github.workspace }}/home.tar.xz
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: ./.github/actions/install-xldd
        with:
          target: ${{ env.SYSTEM_TARGET }}
      - name: "Install chroot"
        uses: ./.github/actions/multistrap
        with:
          arch: ${{ matrix.arch }}
      - id: get_numpy
        uses: ./.github/actions/numpy_vers
        with:
          pyver: ${{ matrix.python-version }}
      - uses: ./.github/actions/python-build
        with:
          build_flavor: ${{ matrix.build-flavor }}
          numpy_build: "${{ steps.get_numpy.outputs.build_version }}"
          numpy_dep: "${{ steps.get_numpy.outputs.dep_version }}"
          target: ${{ env.SYSTEM_TARGET }}
          chroot: ${{ env.SYSTEM_RASPBIAN }}
      - uses: actions/upload-artifact@v2
        with:
          name: "deepspeech-${{ matrix.build-flavor }}-${{ matrix.python-version }}-${{ matrix.arch }}.whl"
          path: ${{ github.workspace }}/wheels/*.whl
  build-nodejs-LinuxArmv7:
    name: "LinArmv7|Build NodeJS and ElectronJS"
    runs-on: ubuntu-20.04
    needs: [ build-lib_LinuxArmv7, swig_Linux, tensorflow_opt-LinuxArmv7 ]
    strategy:
      matrix:
        build-flavor: ["tflite"]
        arch: [ "armv7" ]
    env:
      SYSTEM_TARGET: rpi3
      SYSTEM_RASPBIAN: ${{ github.workspace }}/multistrap-raspbian-buster
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v2
        with:
          name: "native_client.${{ matrix.build-flavor }}.linux.${{ matrix.arch }}.tar.xz"
          path: ${{ github.workspace }}/tensorflow/bazel-bin/native_client/
      - run: |
          cd ${{ github.workspace }}/tensorflow/bazel-bin/native_client/
          tar xf native_client.tar.xz
          ls -hal
          cd ${{ github.workspace }}/
      - uses: actions/download-artifact@v2
        with:
          name: "swig_Linux"
          path: ${{ github.workspace }}/native_client/ds-swig/
      - name: Link ds-swig into swig
        run: |
          ls -hal ${{ github.workspace }}/native_client/ds-swig/bin
          ln -s ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
          chmod +x ${{ github.workspace }}/native_client/ds-swig/bin/ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
      - uses: actions/download-artifact@v2
        with:
          name: ${{ needs.tensorflow_opt-LinuxArmv7.outputs.cache_key }}
          path: ${{ github.workspace }}/
        if: needs.tensorflow_opt-LinuxArmv7.outputs.status == 'missing'
      - uses: ./.github/actions/check_artifact_exists
        with:
          name: ${{ needs.tensorflow_opt-LinuxArmv7.outputs.cache_key }}
          path: ${{ github.workspace }}/
          download: true
        if: needs.tensorflow_opt-LinuxArmv7.outputs.status == 'found'
      - run: |
          tar -xf ${{ github.workspace }}/home.tar.xz --skip-old-files
          rm ${{ github.workspace }}/home.tar.xz
      - uses: ./.github/actions/install-xldd
        with:
          target: ${{ env.SYSTEM_TARGET }}
      - name: "Install chroot"
        uses: ./.github/actions/multistrap
        with:
          arch: ${{ matrix.arch }}
      - uses: actions/setup-node@v2
        with:
          node-version: 12
      - uses: actions/cache@v2
        id: node-headers-cache
        with:
          path: native_client/javascript/headers/nodejs/
          key: node-headers-10.0.0_15.0.0
      - uses: actions/cache@v2
        id: electron-headers-cache
        with:
          path: native_client/javascript/headers/electronjs/
          key: electron-headers-5.0.13_12.0.0
      - uses: ./.github/actions/node-build
        with:
          nodejs_versions: "10.0.0 11.0.0 12.7.0 13.0.0 14.0.0 15.0.0"
          electronjs_versions: "5.0.13 6.0.12 6.1.7 7.0.1 7.1.8 8.0.1 9.0.1 9.1.0 9.2.0 10.0.0 10.1.0 11.0.0 12.0.0"
          target: ${{ env.SYSTEM_TARGET }}
          chroot: ${{ env.SYSTEM_RASPBIAN }}
      - uses: actions/upload-artifact@v2
        with:
          name: "nodewrapper-${{ matrix.build-flavor }}-${{ matrix.arch }}.tar.gz"
          path: ${{ github.workspace }}/native_client/javascript/wrapper.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: "deepspeech_intermediate-${{ matrix.build-flavor }}-${{ matrix.arch }}.tgz"
          path: ${{ github.workspace }}/native_client/javascript/deepspeech-*.tgz
  build-python-LinuxAarch64:
    name: "LinAarch64|Build python bindings"
    runs-on: ubuntu-20.04
    needs: [ build-lib_LinuxAarch64, swig_Linux, tensorflow_opt-LinuxAarch64 ]
    strategy:
      matrix:
        build-flavor: ["tflite"]
        python-version: [3.7]
        arch: [ "aarch64" ]
    env:
      DEBIAN_FRONTEND: "noninteractive"
      SYSTEM_TARGET: rpi3-armv8
      SYSTEM_RASPBIAN: ${{ github.workspace }}/multistrap-armbian64-buster
    steps:
      - run: |
          sudo apt-get install -y --no-install-recommends
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v2
        with:
          name: "native_client.${{ matrix.build-flavor }}.linux.${{ matrix.arch }}.tar.xz"
          path: ${{ github.workspace }}/tensorflow/bazel-bin/native_client/
      - run: |
          cd ${{ github.workspace }}/tensorflow/bazel-bin/native_client/
          tar xf native_client.tar.xz
          ls -hal
          cd ${{ github.workspace }}/
      - uses: actions/download-artifact@v2
        with:
          name: "swig_Linux"
          path: ${{ github.workspace }}/native_client/ds-swig/
      - name: Link ds-swig into swig
        run: |
          ls -hal ${{ github.workspace }}/native_client/ds-swig/bin
          ln -s ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
          chmod +x ${{ github.workspace }}/native_client/ds-swig/bin/ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
      - uses: actions/download-artifact@v2
        with:
          name: ${{ needs.tensorflow_opt-LinuxAarch64.outputs.cache_key }}
          path: ${{ github.workspace }}/
        if: needs.tensorflow_opt-LinuxAarch64.outputs.status == 'missing'
      - uses: ./.github/actions/check_artifact_exists
        with:
          name: ${{ needs.tensorflow_opt-LinuxAarch64.outputs.cache_key }}
          path: ${{ github.workspace }}/
          download: true
        if: needs.tensorflow_opt-LinuxAarch64.outputs.status == 'found'
      - run: |
          tar -xf ${{ github.workspace }}/home.tar.xz --skip-old-files
          rm ${{ github.workspace }}/home.tar.xz
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: ./.github/actions/install-xldd
        with:
          target: ${{ env.SYSTEM_TARGET }}
      - name: "Install chroot"
        uses: ./.github/actions/multistrap
        with:
          arch: ${{ matrix.arch }}
      - id: get_numpy
        uses: ./.github/actions/numpy_vers
        with:
          pyver: ${{ matrix.python-version }}
      - uses: ./.github/actions/python-build
        with:
          build_flavor: ${{ matrix.build-flavor }}
          numpy_build: "${{ steps.get_numpy.outputs.build_version }}"
          numpy_dep: "${{ steps.get_numpy.outputs.dep_version }}"
          target: ${{ env.SYSTEM_TARGET }}
          chroot: ${{ env.SYSTEM_RASPBIAN }}
      - uses: actions/upload-artifact@v2
        with:
          name: "deepspeech-${{ matrix.build-flavor }}-${{ matrix.python-version }}-${{ matrix.arch }}.whl"
          path: ${{ github.workspace }}/wheels/*.whl
  build-nodejs-LinuxAarch64:
    name: "LinAarch64|Build NodeJS and ElectronJS"
    runs-on: ubuntu-20.04
    needs: [ build-lib_LinuxAarch64, swig_Linux, tensorflow_opt-LinuxAarch64 ]
    strategy:
      matrix:
        build-flavor: ["tflite"]
        arch: [ "aarch64" ]
    env:
      SYSTEM_TARGET: rpi3-armv8
      SYSTEM_RASPBIAN: ${{ github.workspace }}/multistrap-armbian64-buster
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v2
        with:
          name: "native_client.${{ matrix.build-flavor }}.linux.${{ matrix.arch }}.tar.xz"
          path: ${{ github.workspace }}/tensorflow/bazel-bin/native_client/
      - run: |
          cd ${{ github.workspace }}/tensorflow/bazel-bin/native_client/
          tar xf native_client.tar.xz
          ls -hal
          cd ${{ github.workspace }}/
      - uses: actions/download-artifact@v2
        with:
          name: "swig_Linux"
          path: ${{ github.workspace }}/native_client/ds-swig/
      - name: Link ds-swig into swig
        run: |
          ls -hal ${{ github.workspace }}/native_client/ds-swig/bin
          ln -s ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
          chmod +x ${{ github.workspace }}/native_client/ds-swig/bin/ds-swig ${{ github.workspace }}/native_client/ds-swig/bin/swig
      - uses: actions/download-artifact@v2
        with:
          name: ${{ needs.tensorflow_opt-LinuxAarch64.outputs.cache_key }}
          path: ${{ github.workspace }}/
        if: needs.tensorflow_opt-LinuxAarch64.outputs.status == 'missing'
      - uses: ./.github/actions/check_artifact_exists
        with:
          name: ${{ needs.tensorflow_opt-LinuxAarch64.outputs.cache_key }}
          path: ${{ github.workspace }}/
          download: true
        if: needs.tensorflow_opt-LinuxAarch64.outputs.status == 'found'
      - run: |
          tar -xf ${{ github.workspace }}/home.tar.xz --skip-old-files
          rm ${{ github.workspace }}/home.tar.xz
      - uses: ./.github/actions/install-xldd
        with:
          target: ${{ env.SYSTEM_TARGET }}
      - name: "Install chroot"
        uses: ./.github/actions/multistrap
        with:
          arch: ${{ matrix.arch }}
      - uses: actions/setup-node@v2
        with:
          node-version: 12
      - uses: actions/cache@v2
        id: node-headers-cache
        with:
          path: native_client/javascript/headers/nodejs/
          key: node-headers-10.0.0_15.0.0
      - uses: actions/cache@v2
        id: electron-headers-cache
        with:
          path: native_client/javascript/headers/electronjs/
          key: electron-headers-5.0.13_12.0.0
      - uses: ./.github/actions/node-build
        with:
          nodejs_versions: "10.0.0 11.0.0 12.7.0 13.0.0 14.0.0 15.0.0"
          electronjs_versions: "5.0.13 6.0.12 6.1.7 7.0.1 7.1.8 8.0.1 9.0.1 9.1.0 9.2.0 10.0.0 10.1.0 11.0.0 12.0.0"
          target: ${{ env.SYSTEM_TARGET }}
          chroot: ${{ env.SYSTEM_RASPBIAN }}
      - uses: actions/upload-artifact@v2
        with:
          name: "nodewrapper-${{ matrix.build-flavor }}-${{ matrix.arch }}.tar.gz"
          path: ${{ github.workspace }}/native_client/javascript/wrapper.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: "deepspeech_intermediate-${{ matrix.build-flavor }}-${{ matrix.arch }}.tgz"
          path: ${{ github.workspace }}/native_client/javascript/deepspeech-*.tgz
  test-cpp-LinuxArm:
    name: "LinArm*|Test C++ binary"
    runs-on: ubuntu-20.04
    needs: [ build-lib_LinuxArmv7, build-lib_LinuxAarch64, train-test-model-Linux ]
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
      matrix:
        arch: [ "armv7", "aarch64" ]
        build-flavor: ["tflite"]
        models: ["test", "prod"]
        bitrate: ["8k", "16k"]
    env:
      CI_TMP_DIR: ${{ github.workspace }}/tmp
      DEBIAN_FRONTEND: "noninteractive"
      DEEPSPEECH_PROD_MODEL: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pb
      DEEPSPEECH_PROD_MODEL_MMAP: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pbmm
      DEEPSPEECH_TEST_MODEL: ${{ github.workspace }}/tmp/output_graph.pb
      EXPECTED_TENSORFLOW_VERSION: "TensorFlow: v2.3.0-6-g23ad988"
      SYSTEM_RASPBIAN: ${{ github.workspace }}/chroot-${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: "Install and setup chroot"
        uses: ./.github/actions/multistrap
        with:
          arch: ${{ matrix.arch }}
          packages: "bash wget curl sox xxd libatlas3-base libopenblas-base qemu-user-static"
      - uses: actions/download-artifact@v2
        with:
          name: "native_client.${{ matrix.build-flavor }}.linux.${{ matrix.arch }}.tar.xz"
          path: ${{ env.CI_TMP_DIR }}
      - run: |
          cd ${{ env.CI_TMP_DIR }}
          mkdir ds && cd ds && tar xf ../native_client.tar.xz
      - uses: actions/download-artifact@v2
        with:
          name: "test-model.${{ matrix.build-flavor }}-${{ matrix.bitrate }}.zip"
          path: ${{ env.CI_TMP_DIR }}
        if: matrix.models == 'test'
      - run: |
          ls -hal ${{ env.CI_TMP_DIR }}/
        if: matrix.models == 'test'
      - name: "Check tests"
        run: |
          file ${{ env.SYSTEM_RASPBIAN }}/${{ env.CI_TMP_DIR }}/ds/*
      - uses: ./.github/actions/run-tests
        with:
          runtime: "cpp"
          chroot: "sudo --preserve-env chroot ${{ env.SYSTEM_RASPBIAN }}/ ${{ github.workspace }}"
          build-flavor: ${{ matrix.build-flavor }}
          bitrate: ${{ matrix.bitrate }}
          model-kind: ${{ matrix.models }}
  test-py-LinuxArm:
    name: "LinArm*|Test Python bindings"
    runs-on: ubuntu-20.04
    needs: [ build-python-LinuxArmv7, build-python-LinuxAarch64, train-test-model-Linux ]
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
      matrix:
        arch: [ "armv7", "aarch64" ]
        python-version: [3.7]
        build-flavor: ["tf", "tflite"]
        models: ["test", "prod"]
        bitrate: ["8k", "16k"]
    env:
      CI_TMP_DIR: ${{ github.workspace }}/tmp/
      DEBIAN_FRONTEND: "noninteractive"
      DEEPSPEECH_PROD_MODEL: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pb
      DEEPSPEECH_PROD_MODEL_MMAP: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pbmm
      DEEPSPEECH_TEST_MODEL: ${{ github.workspace }}/tmp/output_graph.pb
      EXPECTED_TENSORFLOW_VERSION: "TensorFlow: v2.3.0-6-g23ad988"
      SYSTEM_RASPBIAN: ${{ github.workspace }}/chroot-${{ matrix.arch }}
      PIP_EXTRA_INDEX_URL: "https://www.piwheels.org/simple https://lissyx.github.io/deepspeech-python-wheels/"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: "Install and setup chroot"
        uses: ./.github/actions/multistrap
        with:
          arch: ${{ matrix.arch }}
          packages: "bash wget curl sox xxd libatlas3-base libopenblas-base python3 qemu-user-static"
      - uses: actions/download-artifact@v2
        with:
          name: "deepspeech-${{ matrix.build-flavor }}-${{ matrix.python-version }}-${{ matrix.arch }}.whl"
          path: ${{ env.CI_TMP_DIR }}
      - uses: actions/download-artifact@v2
        with:
          name: "test-model.${{ matrix.build-flavor }}-${{ matrix.bitrate }}.zip"
          path: ${{ env.CI_TMP_DIR }}
        if: matrix.models == 'test'
      - run: |
          ls -hal ${{ env.CI_TMP_DIR }}/
        if: matrix.models == 'test'
      - run: |
          ls -hal ${{ env.CI_TMP_DIR }}/
          sudo --preserve-env chroot ${{ env.SYSTEM_RASPBIAN }}/ pip3 install --only-binary :all: --upgrade ${{ env.CI_TMP_DIR }}/deepspeech*.whl
      - uses: ./.github/actions/run-tests
        with:
          runtime: "python"
          chroot: "sudo --preserve-env chroot ${{ env.SYSTEM_RASPBIAN }}/ ${{ github.workspace }}"
          build-flavor: ${{ matrix.build-flavor }}
          bitrate: ${{ matrix.bitrate }}
          model-kind: ${{ matrix.models }}
  test-nodejs-LinuxArm:
    name: "LinArm*|Test NodeJS bindings"
    runs-on: ubuntu-20.04
    needs: [ build-nodejs-LinuxArmv7, build-nodejs-LinuxAarch64, train-test-model-Linux ]
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
      matrix:
        arch: [ "armv7", "aarch64" ]
        # https://nodejs.org/en/about/releases/
        nodejs-version: [10, 12, 14, 15]
        build-flavor: ["tflite"]
        models: ["test"]
        bitrate: ["16k"]
    env:
      CI_TMP_DIR: ${{ github.workspace }}/tmp/
      DEBIAN_FRONTEND: "noninteractive"
      DEEPSPEECH_PROD_MODEL: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pb
      DEEPSPEECH_PROD_MODEL_MMAP: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pbmm
      DEEPSPEECH_TEST_MODEL: ${{ github.workspace }}/tmp/output_graph.pb
      EXPECTED_TENSORFLOW_VERSION: "TensorFlow: v2.3.0-6-g23ad988"
      SYSTEM_RASPBIAN: ${{ github.workspace }}/chroot-${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: "Install and setup chroot"
        uses: ./.github/actions/multistrap
        with:
          arch: ${{ matrix.arch }}
          packages: "bash wget curl sox xxd libatlas3-base libopenblas-base qemu-user-static"
      - name: "Install NodeJS"
        run: |
          (echo "Package: nodejs" && echo "Pin: origin deb.nodesource.com" && echo "Pin-Priority: 999") > ${{ env.SYSTEM_RASPBIAN }}/etc/apt/preferences
          echo "deb http://deb.nodesource.com/node_${{ matrix.nodejs-version }}.x buster main" > ${{ env.SYSTEM_RASPBIAN }}/etc/apt/sources.list.d/nodesource.list
          wget -qO- https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo --preserve-env chroot ${{ env.SYSTEM_RASPBIAN }}/ apt-key add -
          sudo --preserve-env chroot ${{ env.SYSTEM_RASPBIAN }}/ apt-get update -y
          sudo --preserve-env chroot ${{ env.SYSTEM_RASPBIAN }}/ apt-get install -y nodejs
      - uses: actions/download-artifact@v2
        with:
          name: "deepspeech_intermediate-${{ matrix.build-flavor }}-${{ matrix.arch }}.tgz"
          path: ${{ env.CI_TMP_DIR }}
      - uses: actions/download-artifact@v2
        with:
          name: "test-model.${{ matrix.build-flavor }}-${{ matrix.bitrate }}.zip"
          path: ${{ env.CI_TMP_DIR }}
        if: matrix.models == 'test'
      - run: |
          ls -hal ${{ env.CI_TMP_DIR }}/
        if: matrix.models == 'test'
      - name: Install deepspeech package
        run: |
          ls -hal ${{ env.CI_TMP_DIR }}/
          sudo --preserve-env chroot ${{ env.SYSTEM_RASPBIAN }}/ npm install --verbose ${{ env.CI_TMP_DIR }}/deepspeech*.tgz
      - uses: ./.github/actions/run-tests
        with:
          runtime: "node"
          chroot: "sudo --preserve-env chroot ${{ env.SYSTEM_RASPBIAN }}/ ${{ github.workspace }}"
          build-flavor: ${{ matrix.build-flavor }}
          bitrate: ${{ matrix.bitrate }}
          model-kind: ${{ matrix.models }}
  test-electronjs-LinuxArm:
    name: "LinArm*|Test ElectronJS bindings"
    runs-on: ubuntu-20.04
    needs: [ build-nodejs-LinuxArmv7, build-nodejs-LinuxAarch64, train-test-model-Linux ]
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
      matrix:
        arch: [ "armv7", "aarch64" ]
        electronjs-version: [5.0.13, 6.1.7, 7.1.8, 8.0.1, 9.2.0, 10.1.0, 11.0.0, 12.0.0]
        build-flavor: ["tflite"]
        models: ["test"]
        bitrate: ["16k"]
    env:
      CI_TMP_DIR: ${{ github.workspace }}/tmp/
      DEBIAN_FRONTEND: "noninteractive"
      DEEPSPEECH_PROD_MODEL: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pb
      DEEPSPEECH_PROD_MODEL_MMAP: https://github.com/reuben/DeepSpeech/releases/download/v0.7.0-alpha.3/output_graph.pbmm
      DEEPSPEECH_TEST_MODEL: ${{ github.workspace }}/tmp/output_graph.pb
      EXPECTED_TENSORFLOW_VERSION: "TensorFlow: v2.3.0-6-g23ad988"
      SYSTEM_RASPBIAN: ${{ github.workspace }}/chroot-${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: "Install and setup chroot"
        uses: ./.github/actions/multistrap
        with:
          arch: ${{ matrix.arch }}
          packages: "bash wget curl sox xxd libatlas3-base libopenblas-base qemu-user-static"
      - name: "Install NodeJS"
        run: |
          (echo "Package: nodejs" && echo "Pin: origin deb.nodesource.com" && echo "Pin-Priority: 999") > ${{ env.SYSTEM_RASPBIAN }}/etc/apt/preferences
          echo "deb http://deb.nodesource.com/node_12.x buster main" > ${{ env.SYSTEM_RASPBIAN }}/etc/apt/sources.list.d/nodesource.list
          wget -qO- https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo --preserve-env chroot ${{ env.SYSTEM_RASPBIAN }}/ apt-key add -
          sudo --preserve-env chroot ${{ env.SYSTEM_RASPBIAN }}/ apt-get update -y
          sudo --preserve-env chroot ${{ env.SYSTEM_RASPBIAN }}/ apt-get install -y nodejs
      - uses: actions/download-artifact@v2
        with:
          name: "deepspeech_intermediate-${{ matrix.build-flavor }}-${{ matrix.arch }}.tgz"
          path: ${{ env.CI_TMP_DIR }}
      - uses: actions/download-artifact@v2
        with:
          name: "test-model.${{ matrix.build-flavor }}-${{ matrix.bitrate }}.zip"
          path: ${{ env.CI_TMP_DIR }}
        if: matrix.models == 'test'
      - run: |
          ls -hal ${{ env.CI_TMP_DIR }}/
        if: matrix.models == 'test'
      - name: Install deepspeech package
        run: |
          ls -hal ${{ env.CI_TMP_DIR }}/
          sudo --preserve-env chroot ${{ env.SYSTEM_RASPBIAN }}/ npm install ${{ env.CI_TMP_DIR }}/deepspeech*.tgz
      - run: |
          sudo --preserve-env chroot ${{ env.SYSTEM_RASPBIAN }}/ npm install electron@${{ matrix.electronjs-version }}
      - uses: ./.github/actions/run-tests
        with:
          runtime: "electronjs"
          chroot: "sudo --preserve-env chroot ${{ env.SYSTEM_RASPBIAN }}/ ${{ github.workspace }}"
          build-flavor: ${{ matrix.build-flavor }}
          bitrate: ${{ matrix.bitrate }}
          model-kind: ${{ matrix.models }}
        timeout-minutes: 5
