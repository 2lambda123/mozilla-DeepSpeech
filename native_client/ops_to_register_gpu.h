// This file was autogenerated by print_selective_registration_header.py
#ifndef OPS_TO_REGISTER
#define OPS_TO_REGISTER

    namespace {
      constexpr const char* skip(const char* x) {
        return (*x) ? (*x == ' ' ? skip(x + 1) : x) : x;
      }

      constexpr bool isequal(const char* x, const char* y) {
        return (*skip(x) && *skip(y))
                   ? (*skip(x) == *skip(y) && isequal(skip(x) + 1, skip(y) + 1))
                   : (!*skip(x) && !*skip(y));
      }

      template<int N>
      struct find_in {
        static constexpr bool f(const char* x, const char* const y[N]) {
          return isequal(x, y[0]) || find_in<N - 1>::f(x, y + 1);
        }
      };

      template<>
      struct find_in<0> {
        static constexpr bool f(const char* x, const char* const y[]) {
          return false;
        }
      };
    }  // end namespace
    constexpr const char* kNecessaryOpKernelClasses[] = {
"BinaryOp<GPUDevice, functor::add<float>>",
"ConcatV2Op<GPUDevice, float>",
"ExpandDimsOp<int32>",
"FillOp<CPUDevice, float, int32>",
"FillOp<GPUDevice, float, int32>",
"GatherNdOp<GPUDevice, float, int32>",
"BinaryOp<CPUDevice, functor::less<int32>>",
"MatMulOp<GPUDevice, float, true>",
"ReductionOp<CPUDevice, ::tensorflow::int32, int32, Eigen::internal::MaxReducer<::tensorflow::int32>>",
"BinaryOp<GPUDevice, functor::minimum<float>>",
"BinaryOp<GPUDevice, functor::mul<float>>",
"PackOp<CPUDevice, ::tensorflow::int32>",
"RangeOp<::tensorflow::int32>",
"ReluOp<GPUDevice, float>",
"SoftmaxOpGPU<float>",
"TileOp<GPUDevice, int32>",
"BlockLSTMOp<GPUDevice, float, true>",
"AssignOpT<GPUDevice, float>",
"TransposeCpuOp",
"RecvOp",
"SendOp",
"VariableOp",
"ReshapeOp",
"PlaceholderOp",
"NoOp",
"CpuCastOp",
"ConstantOp",
"IdentityOp",
};
#define SHOULD_REGISTER_OP_KERNEL(clz) (find_in<sizeof(kNecessaryOpKernelClasses) / sizeof(*kNecessaryOpKernelClasses)>::f(clz, kNecessaryOpKernelClasses))

constexpr inline bool ShouldRegisterOp(const char op[]) {
  return false
     || isequal(op, "Add")
     || isequal(op, "Cast")
     || isequal(op, "ConcatV2")
     || isequal(op, "Const")
     || isequal(op, "ExpandDims")
     || isequal(op, "Fill")
     || isequal(op, "GatherNd")
     || isequal(op, "Identity")
     || isequal(op, "Less")
     || isequal(op, "MatMul")
     || isequal(op, "Max")
     || isequal(op, "Minimum")
     || isequal(op, "Mul")
     || isequal(op, "NoOp")
     || isequal(op, "Pack")
     || isequal(op, "Placeholder")
     || isequal(op, "Range")
     || isequal(op, "Relu")
     || isequal(op, "Reshape")
     || isequal(op, "Softmax")
     || isequal(op, "Tile")
     || isequal(op, "Transpose")
     || isequal(op, "_Recv")
     || isequal(op, "_Send")
     || isequal(op, "_HostRecv")
     || isequal(op, "_HostSend")
     || isequal(op, "VariableV2")
     || isequal(op, "BlockLSTM")
     || isequal(op, "Assign")
  ;
}
#define SHOULD_REGISTER_OP(op) ShouldRegisterOp(op)

#define SHOULD_REGISTER_OP_GRADIENT false
#endif
