/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.mozilla.deepspeech.libdeepspeech;

public class impl {
  public static SWIGTYPE_p_p_ModelState new_modelstatep() {
    long cPtr = implJNI.new_modelstatep();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_ModelState(cPtr, false);
  }

  public static SWIGTYPE_p_p_ModelState copy_modelstatep(SWIGTYPE_p_ModelState value) {
    long cPtr = implJNI.copy_modelstatep(SWIGTYPE_p_ModelState.getCPtr(value));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_ModelState(cPtr, false);
  }

  public static void delete_modelstatep(SWIGTYPE_p_p_ModelState obj) {
    implJNI.delete_modelstatep(SWIGTYPE_p_p_ModelState.getCPtr(obj));
  }

  public static void modelstatep_assign(SWIGTYPE_p_p_ModelState obj, SWIGTYPE_p_ModelState value) {
    implJNI.modelstatep_assign(SWIGTYPE_p_p_ModelState.getCPtr(obj), SWIGTYPE_p_ModelState.getCPtr(value));
  }

  public static SWIGTYPE_p_ModelState modelstatep_value(SWIGTYPE_p_p_ModelState obj) {
    long cPtr = implJNI.modelstatep_value(SWIGTYPE_p_p_ModelState.getCPtr(obj));
    return (cPtr == 0) ? null : new SWIGTYPE_p_ModelState(cPtr, false);
  }

  public static SWIGTYPE_p_p_StreamingState new_streamingstatep() {
    long cPtr = implJNI.new_streamingstatep();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_StreamingState(cPtr, false);
  }

  public static SWIGTYPE_p_p_StreamingState copy_streamingstatep(SWIGTYPE_p_StreamingState value) {
    long cPtr = implJNI.copy_streamingstatep(SWIGTYPE_p_StreamingState.getCPtr(value));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_StreamingState(cPtr, false);
  }

  public static void delete_streamingstatep(SWIGTYPE_p_p_StreamingState obj) {
    implJNI.delete_streamingstatep(SWIGTYPE_p_p_StreamingState.getCPtr(obj));
  }

  public static void streamingstatep_assign(SWIGTYPE_p_p_StreamingState obj, SWIGTYPE_p_StreamingState value) {
    implJNI.streamingstatep_assign(SWIGTYPE_p_p_StreamingState.getCPtr(obj), SWIGTYPE_p_StreamingState.getCPtr(value));
  }

  public static SWIGTYPE_p_StreamingState streamingstatep_value(SWIGTYPE_p_p_StreamingState obj) {
    long cPtr = implJNI.streamingstatep_value(SWIGTYPE_p_p_StreamingState.getCPtr(obj));
    return (cPtr == 0) ? null : new SWIGTYPE_p_StreamingState(cPtr, false);
  }

  /**
   * An object providing an interface to a trained DeepSpeech model.<br>
   * <br>
   * @param aModelPath The path to the frozen model graph.<br>
   * retval a ModelState pointer<br>
   * <br>
   * @return Zero on success, non-zero on failure.
   */
  public static int CreateModel(String aModelPath, SWIGTYPE_p_p_ModelState retval) {
    return implJNI.CreateModel(aModelPath, SWIGTYPE_p_p_ModelState.getCPtr(retval));
  }

  /**
   * Get beam width value used by the model. If {DS_SetModelBeamWidth}<br>
   *        was not called before, will return the default value loaded from the<br>
   *        model file.<br>
   * <br>
   * @param aCtx A ModelState pointer created with {DS_CreateModel}.<br>
   * <br>
   * @return Beam width value used by the model.
   */
  public static long GetModelBeamWidth(SWIGTYPE_p_ModelState aCtx) {
    return implJNI.GetModelBeamWidth(SWIGTYPE_p_ModelState.getCPtr(aCtx));
  }

  /**
   * Set beam width value used by the model.<br>
   * <br>
   * @param aCtx A ModelState pointer created with {DS_CreateModel}.<br>
   * @param aBeamWidth The beam width used by the model. A larger beam width value<br>
   *                   generates better results at the cost of decoding time.<br>
   * <br>
   * @return Zero on success, non-zero on failure.
   */
  public static int SetModelBeamWidth(SWIGTYPE_p_ModelState aCtx, long aBeamWidth) {
    return implJNI.SetModelBeamWidth(SWIGTYPE_p_ModelState.getCPtr(aCtx), aBeamWidth);
  }

  /**
   * Return the sample rate expected by a model.<br>
   * <br>
   * @param aCtx A ModelState pointer created with {DS_CreateModel}.<br>
   * <br>
   * @return Sample rate expected by the model for its input.
   */
  public static int GetModelSampleRate(SWIGTYPE_p_ModelState aCtx) {
    return implJNI.GetModelSampleRate(SWIGTYPE_p_ModelState.getCPtr(aCtx));
  }

  /**
   * Frees associated resources and destroys model object.
   */
  public static void FreeModel(SWIGTYPE_p_ModelState ctx) {
    implJNI.FreeModel(SWIGTYPE_p_ModelState.getCPtr(ctx));
  }

  /**
   * Enable decoding using an external scorer.<br>
   * <br>
   * @param aCtx The ModelState pointer for the model being changed.<br>
   * @param aScorerPath The path to the external scorer file.<br>
   * <br>
   * @return Zero on success, non-zero on failure (invalid arguments).
   */
  public static int EnableExternalScorer(SWIGTYPE_p_ModelState aCtx, String aScorerPath) {
    return implJNI.EnableExternalScorer(SWIGTYPE_p_ModelState.getCPtr(aCtx), aScorerPath);
  }

  /**
   * Add a hot-word and its boost.<br>
   * <br>
   * @param aCtx The ModelState pointer for the model being changed.<br>
   * @param word The hot-word.<br>
   * @param boost The boost.<br>
   * <br>
   * @return Zero on success, non-zero on failure (invalid arguments).
   */
  public static int AddHotWord(SWIGTYPE_p_ModelState aCtx, String word, float boost) {
    return implJNI.AddHotWord(SWIGTYPE_p_ModelState.getCPtr(aCtx), word, boost);
  }

  /**
   * Remove entry for a hot-word from the hot-words map.<br>
   * <br>
   * @param aCtx The ModelState pointer for the model being changed.<br>
   * @param word The hot-word.<br>
   * <br>
   * @return Zero on success, non-zero on failure (invalid arguments).
   */
  public static int EraseHotWord(SWIGTYPE_p_ModelState aCtx, String word) {
    return implJNI.EraseHotWord(SWIGTYPE_p_ModelState.getCPtr(aCtx), word);
  }

  /**
   * Removes all elements from the hot-words map.<br>
   * <br>
   * @param aCtx The ModelState pointer for the model being changed.<br>
   * <br>
   * @return Zero on success, non-zero on failure (invalid arguments).
   */
  public static int ClearHotWords(SWIGTYPE_p_ModelState aCtx) {
    return implJNI.ClearHotWords(SWIGTYPE_p_ModelState.getCPtr(aCtx));
  }

  /**
   * Disable decoding using an external scorer.<br>
   * <br>
   * @param aCtx The ModelState pointer for the model being changed.<br>
   * <br>
   * @return Zero on success, non-zero on failure.
   */
  public static int DisableExternalScorer(SWIGTYPE_p_ModelState aCtx) {
    return implJNI.DisableExternalScorer(SWIGTYPE_p_ModelState.getCPtr(aCtx));
  }

  /**
   * Set hyperparameters alpha and beta of the external scorer.<br>
   * <br>
   * @param aCtx The ModelState pointer for the model being changed.<br>
   * @param aAlpha The alpha hyperparameter of the decoder. Language model weight.<br>
   * <br>
   * <br>
   * @return Zero on success, non-zero on failure.
   */
  public static int SetScorerAlphaBeta(SWIGTYPE_p_ModelState aCtx, float aAlpha, float aBeta) {
    return implJNI.SetScorerAlphaBeta(SWIGTYPE_p_ModelState.getCPtr(aCtx), aAlpha, aBeta);
  }

  /**
   * Use the DeepSpeech model to convert speech to text.<br>
   * <br>
   * @param aCtx The ModelState pointer for the model to use.<br>
   * @param aBuffer A 16-bit, mono raw audio signal at the appropriate<br>
   *                sample rate (matching what the model was trained on).<br>
   * @param aBufferSize The number of samples in the audio signal.<br>
   * <br>
   * @return The STT result. The user is responsible for freeing the string using<br>
   *         {DS_FreeString()}. Returns NULL on error.
   */
  public static String SpeechToText(SWIGTYPE_p_ModelState aCtx, short[] aBuffer, long aBufferSize) {
    return implJNI.SpeechToText(SWIGTYPE_p_ModelState.getCPtr(aCtx), aBuffer, aBufferSize);
  }

  /**
   * Use the DeepSpeech model to convert speech to text and output results<br>
   * including metadata.<br>
   * <br>
   * @param aCtx The ModelState pointer for the model to use.<br>
   * @param aBuffer A 16-bit, mono raw audio signal at the appropriate<br>
   *                sample rate (matching what the model was trained on).<br>
   * @param aBufferSize The number of samples in the audio signal.<br>
   * @param aNumResults The maximum number of CandidateTranscript structs to return. Returned value might be smaller than this.<br>
   * <br>
   * @return Metadata struct containing multiple CandidateTranscript structs. Each<br>
   *         transcript has per-token metadata including timing information. The<br>
   *         user is responsible for freeing Metadata by calling {DS_FreeMetadata()}.<br>
   *         Returns NULL on error.
   */
  public static Metadata SpeechToTextWithMetadata(SWIGTYPE_p_ModelState aCtx, short[] aBuffer, long aBufferSize, long aNumResults) {
    long cPtr = implJNI.SpeechToTextWithMetadata(SWIGTYPE_p_ModelState.getCPtr(aCtx), aBuffer, aBufferSize, aNumResults);
    return (cPtr == 0) ? null : new Metadata(cPtr, false);
  }

  /**
   * Create a new streaming inference state. The streaming state returned<br>
   *        by this function can then be passed to {DS_FeedAudioContent()}<br>
   *        and {DS_FinishStream()}.<br>
   * <br>
   * @param aCtx The ModelState pointer for the model to use.<br>
   * retval an opaque pointer that represents the streaming state. Can<br>
   *                    be NULL if an error occurs.<br>
   * <br>
   * @return Zero for success, non-zero on failure.
   */
  public static int CreateStream(SWIGTYPE_p_ModelState aCtx, SWIGTYPE_p_p_StreamingState retval) {
    return implJNI.CreateStream(SWIGTYPE_p_ModelState.getCPtr(aCtx), SWIGTYPE_p_p_StreamingState.getCPtr(retval));
  }

  /**
   * Feed audio samples to an ongoing streaming inference.<br>
   * <br>
   * @param aSctx A streaming state pointer returned by {DS_CreateStream()}.<br>
   * @param aBuffer An array of 16-bit, mono raw audio samples at the<br>
   *                appropriate sample rate (matching what the model was trained on).<br>
   * @param aBufferSize The number of samples in <code>aBuffer</code>.
   */
  public static void FeedAudioContent(SWIGTYPE_p_StreamingState aSctx, short[] aBuffer, long aBufferSize) {
    implJNI.FeedAudioContent(SWIGTYPE_p_StreamingState.getCPtr(aSctx), aBuffer, aBufferSize);
  }

  /**
   * Compute the intermediate decoding of an ongoing streaming inference.<br>
   * <br>
   * @param aSctx A streaming state pointer returned by {DS_CreateStream()}.<br>
   * <br>
   * @return The STT intermediate result. The user is responsible for freeing the<br>
   *         string using {DS_FreeString()}.
   */
  public static String IntermediateDecode(SWIGTYPE_p_StreamingState aSctx) {
    return implJNI.IntermediateDecode(SWIGTYPE_p_StreamingState.getCPtr(aSctx));
  }

  /**
   * Compute the intermediate decoding of an ongoing streaming inference,<br>
   *        return results including metadata.<br>
   * <br>
   * @param aSctx A streaming state pointer returned by {DS_CreateStream()}.<br>
   * @param aNumResults The number of candidate transcripts to return.<br>
   * <br>
   * @return Metadata struct containing multiple candidate transcripts. Each transcript<br>
   *         has per-token metadata including timing information. The user is<br>
   *         responsible for freeing Metadata by calling {DS_FreeMetadata()}.<br>
   *         Returns NULL on error.
   */
  public static Metadata IntermediateDecodeWithMetadata(SWIGTYPE_p_StreamingState aSctx, long aNumResults) {
    long cPtr = implJNI.IntermediateDecodeWithMetadata(SWIGTYPE_p_StreamingState.getCPtr(aSctx), aNumResults);
    return (cPtr == 0) ? null : new Metadata(cPtr, false);
  }

  /**
   * Compute the final decoding of an ongoing streaming inference and return<br>
   *        the result. Signals the end of an ongoing streaming inference.<br>
   * <br>
   * @param aSctx A streaming state pointer returned by {DS_CreateStream()}.<br>
   * <br>
   * @return The STT result. The user is responsible for freeing the string using<br>
   *         {DS_FreeString()}.<br>
   * <br>
   * Note: This method will free the state pointer (<code>aSctx)</code>.
   */
  public static String FinishStream(SWIGTYPE_p_StreamingState aSctx) {
    return implJNI.FinishStream(SWIGTYPE_p_StreamingState.getCPtr(aSctx));
  }

  /**
   * Compute the final decoding of an ongoing streaming inference and return<br>
   *        results including metadata. Signals the end of an ongoing streaming<br>
   *        inference.<br>
   * <br>
   * @param aSctx A streaming state pointer returned by {DS_CreateStream()}.<br>
   * @param aNumResults The number of candidate transcripts to return.<br>
   * <br>
   * @return Metadata struct containing multiple candidate transcripts. Each transcript<br>
   *         has per-token metadata including timing information. The user is<br>
   *         responsible for freeing Metadata by calling {DS_FreeMetadata()}.<br>
   *         Returns NULL on error.<br>
   * <br>
   * Note: This method will free the state pointer (<code>aSctx)</code>.
   */
  public static Metadata FinishStreamWithMetadata(SWIGTYPE_p_StreamingState aSctx, long aNumResults) {
    long cPtr = implJNI.FinishStreamWithMetadata(SWIGTYPE_p_StreamingState.getCPtr(aSctx), aNumResults);
    return (cPtr == 0) ? null : new Metadata(cPtr, false);
  }

  /**
   * Destroy a streaming state without decoding the computed logits. This<br>
   *        can be used if you no longer need the result of an ongoing streaming<br>
   *        inference and don't want to perform a costly decode operation.<br>
   * <br>
   * @param aSctx A streaming state pointer returned by {DS_CreateStream()}.<br>
   * <br>
   * Note: This method will free the state pointer (<code>aSctx)</code>.
   */
  public static void FreeStream(SWIGTYPE_p_StreamingState aSctx) {
    implJNI.FreeStream(SWIGTYPE_p_StreamingState.getCPtr(aSctx));
  }

  /**
   * Free memory allocated for metadata information.
   */
  public static void FreeMetadata(Metadata m) {
    implJNI.FreeMetadata(Metadata.getCPtr(m), m);
  }

  /**
   * Free a char* string returned by the DeepSpeech API.
   */
  public static void FreeString(String str) {
    implJNI.FreeString(str);
  }

  /**
   * Returns the version of this library. The returned version is a semantic<br>
   *        version (SemVer 2.0.0). The string returned must be freed with {DS_FreeString()}.<br>
   * <br>
   * @return The version string.
   */
  public static String Version() {
    return implJNI.Version();
  }

  /**
   * Returns a textual description corresponding to an error code.<br>
   *        The string returned must be freed with DS_FreeString()}.<br>
   * <br>
   * @return The error description.
   */
  public static String ErrorCodeToErrorMessage(int aErrorCode) {
    return implJNI.ErrorCodeToErrorMessage(aErrorCode);
  }

}
